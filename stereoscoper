#!/usr/bin/env python

import sys
import os
import operator
import subprocess
import logging
import tempfile
import itertools
import warnings

from PIL import Image, ImageOps, ImageEnhance, ImageStat
import math

class SafeError(RuntimeError): pass

def rotatedRectWithMaxArea(w, h, angle):
	"""
	from: http://stackoverflow.com/questions/16702966/rotate-image-and-crop-out-black-borders
	Given a rectangle of size wxh that has been rotated by 'angle' (in
	radians), computes the width and height of the largest possible
	axis-aligned rectangle (maximal area) within the rotated rectangle.
	"""
	if w <= 0 or h <= 0:
		return 0,0

	width_is_longer = w >= h
	side_long, side_short = (w,h) if width_is_longer else (h,w)

	# since the solutions for angle, -angle and 180-angle are all the same,
	# if suffices to look at the first quadrant and the absolute values of sin,cos:
	sin_a, cos_a = abs(math.sin(angle)), abs(math.cos(angle))
	if side_short <= 2.*sin_a*cos_a*side_long:
		# half constrained case: two crop corners touch the longer side,
		#		the other two corners are on the mid-line parallel to the longer line
		x = 0.5*side_short
		wr,hr = (x/sin_a,x/cos_a) if width_is_longer else (x/cos_a,x/sin_a)
	else:
		# fully constrained case: crop touches all 4 sides
		cos_2a = cos_a*cos_a - sin_a*sin_a
		wr,hr = (w*cos_a - h*sin_a)/cos_2a, (h*cos_a - w*sin_a)/cos_2a

	return wr,hr

class Stereo(object):
	suffix = None
	dest_dir = None
	dest = None

	def __init__(self, left, right, basename):
		self.left = left
		self.right = right
		self.basename = basename
		self.default_action = None
		self._outputs = None
	
	@classmethod
	def from_single(cls, filename):
		img = Image.open(filename)
		width, height = img.size
		single_width = width // 2
		middle_bit = width - (2*single_width)
		left = img.copy().crop((0, 0, single_width, height))
		right = img.copy().crop((single_width+middle_bit, 0, width, height))
		instance = cls(left, right, os.path.basename(filename))

		# type() here is used to avoid a circular reference, aiding reference-counted GC
		instance.default_action = type(instance).merge
		return instance

	@classmethod
	def from_pair(cls, left_filename, right_filename):
		left = Image.open(left_filename)
		right = Image.open(right_filename)
		instance = cls(left, right, os.path.basename(left_filename))
		instance.default_action = type(instance).split
		return instance

	def copy(self):
		return type(self)(self.left, self.right, self.basename)
	
	def swap(self, opts=None):
		self.left, self.right = self.right, self.left
	
	@property
	def outputs(self):
		if self._outputs is None:
			self._outputs = []
		return self._outputs
	
	@property
	def has_outputs(self):
		return self._outputs is not None

	def add_outputs(self, *outputs):
		logging.debug("adding %s outputs: %r" % (len(outputs),outputs))
		self.outputs.extend(outputs)
	
	def merge(self, opts=None):
		def render():
			left = self.left.copy()
			right = self.right.copy()
			lw, lh = left.size
			rw, rh = right.size
			assert lh == rh
			logging.debug("created image %rx%r to house %rx%r and %rx%r images" % (
				lw + rw, lh, lw, lh, rw, rh))
			final = Image.new(left.mode, (lw + rw, lh))
			final.paste(left, (0,0))
			final.paste(right, (lw, 0))
			return final
		self.add_outputs(Output(path=self.add_suffix(), render=render))

	def add_suffix(self, suffixes=[], ext=None):
		if self.dest is not None:
			return self.dest
		base, existing_ext = os.path.splitext(self.basename)
		if ext is not None:
			ext = os.path.extsep + ext
		else:
			ext = existing_ext
		if self.dest_dir:
			base = os.path.join(self.dest_dir, base)
		components = filter(bool, [base, self.suffix] + list(suffixes))
		return "%s%s"% ("-".join(components), ext)
	
	def crop_axis(self, points, percent, sign):
		a, b = points
		size = b - a
		assert size > 0
		diff = int((size * (percent / 100.0)))
		diff *= sign
		if diff == 0: return points
		sign = -1 if diff < 0 else 1
		if sign < 0:
			b += diff
		else:
			a += diff
		return (a,b)

	def slice(self,percent):
		def slice(sign, img):
			w,h = img.size
			left, top, right, bottom = 0, 0, w, h
			left, right = self.crop_axis(points=(0, w), percent=percent, sign=sign)
			return img.crop((left, top, right, bottom))
		self.left = slice(-1, self.left)
		self.right = slice(1, self.right)
	
	def align(self, percent):
		def slice(sign, img):
			w,h = img.size
			left, top, right, bottom = 0, 0, w, h
			top, bottom = self.crop_axis(points=(0, h), percent=percent, sign=sign)
			return img.crop((left, top, right, bottom))
		self.left = slice(-1, self.left)
		self.right = slice(1, self.right)

	def rotate(self, amount):
		w,h = self.left.size
		radians = math.radians(amount)
		new_w, new_h = map(int, rotatedRectWithMaxArea(w, h, radians))

		# (_w, _h) = img.size
		x = int((w - new_w) / 2)+1
		y = int((h - new_h) / 2)+1

		def rot(amount, img):
			img = img.rotate(amount, Image.BICUBIC, expand=False)
			return img.crop((x, y, new_w, new_h))

		self.left = rot(amount, self.left)
		self.right = rot(-amount, self.right)

	def split(self, opts=None):
		left = Output(path=self.add_suffix(['left']), render=lambda: self.left)
		right = Output(path=self.add_suffix(['right']), render=lambda: self.right)
		self.add_outputs(left, right)

	def squash(self, opts=None):
		def resize(img):
			(w, h) = img.size
			new_size = (w, h / 2)
			return img.resize(new_size, Image.ANTIALIAS)
		self.map(resize)

	def scale(self, amount):
		def scale(img):
			(w, h) = img.size
			new_size = (w * amount, h * amount)
			return img.resize(new_size, Image.ANTIALIAS)
		self.map(scale)

	def fit(self, rect):
		to_int = lambda n: int(round(n))
		max_w, max_h = rect
		def scale(img):
			(w, h) = img.size
			scale_w = float(max_w) / w
			scale_h = float(max_h) / h
			if scale_w > scale_h:
				# image is tall
				new_size = (to_int(w * scale_h), max_h)
			else:
				# image is wide
				new_size = (max_w, to_int(h * scale_w))
			# print("Scaling %r to fit in %r because scale = %r" %(
			# 	new_size, rect, (scale_w, scale_h)))

			return img.resize(new_size, Image.ANTIALIAS)
		self.map(scale)
	
	def match(self, opts=None):
		# http://en.wikipedia.org/wiki/Histogram_matching
		import numpy
		size = 256
		def chunk(l):
			for i in xrange(0, len(l), size):
				endpoint = i+size
				yield l[i:i+size]
			assert len(l) == endpoint # make sure chunking was complete and exhaustive

		def find_closest_idx(target, items):
			# items MUST be a monotonically increasing sequence
			last_value = None
			for i, value in enumerate(items):
				if value > target:
					if last_value is None or abs(target - value) < abs(target - last_value):
						return i
					else:
						return i - 1
				last_value = value
			return len(items)-1

		both_histograms = zip(self.left.histogram(), self.right.histogram())
		average = lambda tup: operator.add(*tup) / 2.0
		merged_histograms = list(chunk(map(average, both_histograms)))
		def match_merged(img):
			current_histograms = chunk(img.histogram())
			new_levels = []
			for current, merged in zip(current_histograms, merged_histograms):
				current = numpy.cumsum(current)
				merged = numpy.cumsum(merged)
				def new_level(level):
					existing_value = current[level]
					return find_closest_idx(existing_value, merged)
				new_levels.extend(map(new_level, range(0, size)))
			return new_levels

		self.left = self.left.point(match_merged(self.left))
		self.right = self.right.point(match_merged(self.right))

	def match_median():
		def shiftHistogram(image, rdiff, gdiff, bdiff): # Shift all the pixel values
			table = ([x + rdiff if 0 <= x + rdiff <= 255 else x for x in range(256)] +
			         [x + gdiff if 0 <= x + gdiff <= 255 else x for x in range(256)] +
			         [x + bdiff if 0 <= x + bdiff <= 255 else x for x in range(256)])
			return image.point(table)

		lmedian, rmedian = ImageStat.Stat(self.left).median, ImageStat.Stat(self.right).median
		mmedian = [(lmedian[i] + rmedian[i]) // 2 for i in range(3)]
		self.left = shiftHistogram(self.left, mmedian[0] - lmedian[0], mmedian[1] - lmedian[1], mmedian[2] - lmedian[2])
		assert ImageStat.Stat(self.left).median == mmedian
		self.right = shiftHistogram(self.right, mmedian[0] - rmedian[0], mmedian[1] - rmedian[1], mmedian[2] - rmedian[2])
		assert ImageStat.Stat(self.right).median == mmedian

	def equalize(self, opts=None):
		self.map(ImageOps.equalize)
	
	def map(self, fn):
		self.left, self.right = map(fn, (self.left, self.right))

	def brightness(self, amount):
		self.map(lambda img: ImageEnhance.Brightness(img).enhance(amount))
	
	def contrast(self, amount):
		self.map(lambda img: ImageEnhance.Contrast(img).enhance(amount))
	
	def apply_adjustments(self, opts):
		for attr in ('brightness', 'contrast', 'slice', 'align', 'rotate'):
			fn = getattr(self, attr)
			fn(getattr(opts, attr))
	
	def animate(self, opts):
		resize = getattr(opts, 'resize', None)
		delay = getattr(opts, 'delay', None)
		gif = AnimatedOuptut(stereo=self, path=self.add_suffix(ext='gif'), resize=resize, delay=delay)
		self.add_outputs(gif)
	
	def save(self, conflict_resolver, quality=None):
		if not self.has_outputs:
			logging.debug("no outputs specififed; performing default action")
			self.default_action(self)
		assert self.outputs is not None
		quality = 85 if quality is None else quality
		logging.debug("quality = %s" % (quality,))
		for output in self.outputs:
			output.save(conflict_resolver, quality=quality)
		
		# PIL can accumulate cycles easily, force a GC so we don't run out of memory
		import gc
		gc.collect()
	
	def __repr__(self):
		return "<Image from %s with left=%r and right=%r>" % (self.basename, self.left, self.right)




class Sentinel(object):
	def __init__(self, desc):
		self.__desc = desc
	
	def __repr__(self):
		return "<#Sentinel(%s)>" % (self.__desc,)

class ConflictResolver(object):
	REPLACE = Sentinel("REPLACE")
	ABORT = Sentinel("ABORT")
	IGNORE = Sentinel("IGNORE")

	@classmethod
	def always(cls, response):
		return cls(response_fn = lambda *a: response)

	@classmethod
	def prompt(cls):
		def handle(path):
			if handle.always:
				return handle.always
			response = raw_input("\n%s already exists.\nOverwrite it? [(Y)es / (n)o / replace (a)ll / (s)kip existing ] " % (path,))
			print
			response = response.lower().strip() or 'y'
			if response == 'y':
				return ConflictResolver.REPLACE
			if response == 'a':
				handle.always = ConflictResolver.REPLACE
				return handle.always
			if response == 's':
				handle.always = ConflictResolver.IGNORE
				return handle.always
			else:
				return ConflictResolver.ABORT
		handle.always = None
		return cls(handle)

	def __init__(self, response_fn):
		self.response_fn = response_fn
	
	def resolve(self, path):
		if os.path.exists(path):
			response = self.response_fn(path)
			logging.debug("conflict response = %s" % (response,))
			if response is ConflictResolver.REPLACE:
				os.remove(path)
			elif response is ConflictResolver.ABORT:
				raise RuntimeError("path %r already exists!" % (path,))
			elif response is ConflictResolver.IGNORE:
				return
			else:
				raise RuntimeError("Unknown response: %r!" %(response,))

class Output(object):
	def __init__(self, path, render):
		self.path = path
		self.render = render
	
	def override_path(self, path):
		#TODO: copy ext!
		self.path = path

	def save(self, conflict_resolver, quality):
		img = self.render()
		conflict_resolver.resolve(self.path)
		img.save(self.path, quality=quality)
	
class AnimatedOuptut(object):
	def __init__(self, stereo, path, resize=None, delay=None):
		self.path = path
		self.stereo = stereo
		self.resize = resize
		self.delay = delay
	
	def save(self, conflict_resolver, quality=None):
		stereo = self.stereo.copy()
		stereo.split()
		def output_to_temp(output):
			base, ext = os.path.splitext(output.path)
			temp_path = tempfile.NamedTemporaryFile(suffix=ext, delete=False).name
			output.override_path(temp_path)
		map(output_to_temp, stereo.outputs)

		stereo.save(conflict_resolver = ConflictResolver.always(ConflictResolver.REPLACE), quality=quality)
		paths = [output.path for output in stereo.outputs]
		try:
			cmd = ['convert', '-delay', self.delay or '15', '-loop', '0']
			if self.resize:
				cmd.extend(['-resize', self.resize])
			cmd.extend(paths)
			cmd.append(self.path)
			conflict_resolver.resolve(self.path)
			subprocess.check_call(cmd)
		finally:
			try:
				map(os.remove, paths)
			except StandardError, e:
				print >> sys.stderr, "Warning: could not remove files (%s): %r" % (e, paths)

class Gui(object):
	def __init__(self, images, opts):
		self.opts = opts
		self.images = iter(images)
		self.update(next(self.images))
	
	def update(self, image):
		self.image = image
		self.thumbnail = image.copy()
		self.thumbnail.fit((600,600))
		self.approved = False
		opts = self.opts
		self.slice = opts.slice
		self.align = opts.align
		self.rotate = opts.rotate
		self.brightness = opts.brightness
		self.contrast = opts.contrast

	def display(self):
		from PIL import ImageTk
		image = self.apply_adjustments(self.thumbnail.copy())
		left, right = image.left, image.right
		blended = Image.blend(left, right, 0.5)

		tk_img = ImageTk.PhotoImage(blended)
		self.label.configure(image = tk_img)
		self.label.image = tk_img
		self.label.update()
	
	def apply_adjustments(self, image):
		image.apply_adjustments(self)
		return image

	def opts_description(self):
		keys = "slice", "align", "brightness", "contrast", "rotate"
		return " ".join(["--%s=%s" % (key, getattr(self, key)) for key in keys])

	def run(self):
		#TODO: allow for re-ordering / adding / removing operations
		import Tkinter
		def quit(event):
			event.widget.quit()

		def accept(event):
			if self.approved:
				# double-return. ignore
				return
			logging.debug("applying GUI changes to real image...")
			logging.info("accepted values:\n%s" % (self.opts_description()))
			self.apply_adjustments(self.image)
			self.approved = True
			try:
				self.image.save(conflict_resolver = self.opts.conflict_resolver, quality = self.opts.quality)
			except:
				quit(event)
				raise
			try:
				next_image = next(self.images)
			except StopIteration:
				quit(event)
			else:
				self.update(next_image)
				self.display()

		root = Tkinter.Tk()
		root.resizable(width=Tkinter.FALSE, height=Tkinter.FALSE)
		
		def make_callback(fn):
			def generated(*a):
				def callback(*ignored):
					fn(*a)
					logging.debug("updated settings to: %s" % (self.opts_description(),))
					self.display()
				return callback
			return generated

		@make_callback
		def align(amount):
			self.align += amount

		@make_callback
		def rotate(amount):
			self.rotate += amount

		@make_callback
		def slice(amount):
			self.slice += amount

		@make_callback
		def brightness(amount):
			self.brightness += amount

		@make_callback
		def contrast(amount):
			self.contrast += amount

		@make_callback
		def reset():
			self.brightness = 1.0
			self.contrast = 1.0

		root.bind('<Escape>', quit)
		root.bind('<Return>', accept)

		just = lambda x: "<%s>" % (x,)
		shift = lambda x: just(x.upper()) if len(x) == 1 else "<Shift-%s>" % (x,)
		def bind_arrows(up, down, left, right):
			root.bind(just(up), align(1))
			root.bind(just(down), align(-1))
			root.bind(shift(up), align(0.1))
			root.bind(shift(down), align(-0.1))

			root.bind(just(left), slice(1))
			root.bind(just(right), slice(-1))
			root.bind(shift(left), slice(0.1))
			root.bind(shift(right), slice(-0.1))

		bind_arrows('Up','Down','Left','Right')
		bind_arrows('j','k','h','l')

		# def debug(evt):
		# 	print evt.keysym
		# root.bind('<Key>', debug)

		root.bind('<equal>', brightness(0.05))
		root.bind('<minus>', brightness(-0.05))

		root.bind(just('bracketright'), rotate(1))
		root.bind(just('bracketleft'), rotate(-1))
		root.bind(just('braceright'), rotate(0.1))
		root.bind(just('braceleft'), rotate(-0.1))

		root.bind('<plus>', contrast(0.05))
		root.bind('<underscore>', contrast(-0.05))
		root.bind('<0>', reset())

		self.label = Tkinter.Label(root)
		self.label.pack()
		self.display()
		root.title("Stereoscoper")
		root.mainloop()
		if not self.approved:
			raise SafeError("Cancelled.")

def main():
	from optparse import OptionParser, OptionGroup
	p = OptionParser("usage: %prog [OPTIONS] input1 [input2 [input3]]\n(If given a directory, each file within is processed)")
	p.add_option('-v', '--verbose', action='store_true')
	p.add_option('-f', '--force', help='replace existing files without asking', action='store_true')

	input_opts = OptionGroup(p, "Input / Output")
	input_opts.add_option('-l', '--left', help='inptut image (left)')
	input_opts.add_option('-r', '--right', help='inptut image (right)')
	input_opts.add_option('-o', '--suffix', help='output suffix')
	input_opts.add_option('--output', help='output file (must be used with only a single image)')
	input_opts.add_option('-d', '--dest', help='destination directory')
	input_opts.add_option('-q', '--quality', type='int', help='output quality (1 - 100)')

	actions = OptionGroup(p, title="Image Actions")
	actions.add_option('--squash', action='append_const',   const='squash',   dest='actions', default=[], help='squash half vertically')
	actions.add_option('--split', action='append_const',    const='split',    dest='actions', help='split into left & right')
	actions.add_option('--merge', action='append_const',    const='merge',    dest='actions', help='merge left & right images')
	actions.add_option('--swap', action='append_const',     const='swap',     dest='actions', help='swap left & right')
	actions.add_option('--equalize', action='append_const', const='equalize', dest='actions', help='equalize brightness (auto brightness / contrast)')
	actions.add_option('--match', action='append_const',    const='match',    dest='actions', help='match left & right colours (histogram method)')
	actions.add_option('--match-median', action='append_const',const='match_median', dest='actions', help='match left & right colours (median method)')
	actions.add_option('--animate', action='append_const',  const='animate',  dest='actions', help='make two-frame animated gif')

	actions.add_option('-g', '--gui', help='modify slice / align interactively', action='store_true')
	actions.add_option('--resize', help='(animation only) resize image to fit in rect (e.g "200x120")')
	actions.add_option('--size', dest='resize', help='alias for --resize')
	actions.add_option('--slice', default=0, type='float')
	actions.add_option('--align', default=0, type='float')
	actions.add_option('--rotate', default=0, type='float')
	actions.add_option('--brightness', default=1.0, type='float')
	actions.add_option('--contrast', default=1.0, type='float')

	p.add_option_group(input_opts)
	p.add_option_group(actions)
	opts, args = p.parse_args()

	logging.basicConfig(level=logging.DEBUG if opts.verbose else logging.INFO, format="%(message)s")

	if opts.suffix:
		Stereo.suffix = opts.suffix

	if opts.output:
		assert not opts.dest, "Can't specify both `--dest` and `--output`"
		assert len(args) <= 1, "Can't specify multiple images with --output"
		Stereo.dest = opts.output

	if opts.dest:
		if not os.path.exists(opts.dest):
			logging.debug("creating %s" % (opts.dest,))
			os.makedirs(opts.dest)
		Stereo.dest_dir = opts.dest

	conflict_resolver = ConflictResolver.prompt()

	if opts.force:
		conflict_resolver = ConflictResolver.always(ConflictResolver.REPLACE)
	opts.conflict_resolver = conflict_resolver
	#TODO: use a graphical conflict resolver for --gui

	def apply_actions(image):
		logging.info("Processing %s" % image.basename)
		for action in opts.actions:
			logging.debug("performing action: %s" % (action,))
			getattr(image, action)(opts)
			logging.debug("after %s, image = %r" % (action, image))
		return image

	def process(images):
		if opts.gui:
			Gui(images, opts).run()
		else:
			for image in images:
				image.apply_adjustments(opts)
				image.save(conflict_resolver = conflict_resolver, quality=opts.quality)

	if opts.left or opts.right:
		assert opts.left and opts.right
		stereos = [Stereo.from_pair(opts.left, opts.right)]
	else:
		assert not (opts.left or opts.right)
		assert len(args) > 0, "Please provide an input file! (or try --help)"
		def flattened(args):
			for arg in args:
				if os.path.isdir(arg):
					for f in os.listdir(arg):
						yield os.path.join(arg, f)
				else:
					yield arg
		stereos = itertools.imap(Stereo.from_single, flattened(args))

	stereos = itertools.imap(apply_actions, stereos)
	process(stereos)

if __name__ == '__main__':
	try:
		sys.exit(main())
	except (SafeError, AssertionError), e:
		print >> sys.stderr, e
		sys.exit(1)
	except (KeyboardInterrupt, EOFError):
		sys.exit(1)


